name: CI

on:
  push:
    branches:
      - main
    tags:
      - v*.*.*
  pull_request:

jobs:
  checks:
    name: Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.cache/pre-commit
            target/
          key: checks-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: checks-cargo-
      - name: Installing Rust toolchain
        uses: dtolnay/rust-toolchain@1.65.0
      - name: Installing pre-commit
        run: pip install pre-commit
      - name: pre-commit check
        run: pre-commit

  build:
    needs:
      - checks
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64-linux
            drv: "shared"
          - os: ubuntu-latest
            arch: x86_64-linux
            drv: "hyperscan"
          - os: ubuntu-latest
            arch: x86_64-linux
            drv: "vectorscan"
          - os: ubuntu-latest
            arch: aarch64-linux
            drv: "vectorscan"
          - os: macos-11
            arch: x86_64-darwin
            drv: vectorscan
    name: Nix - ${{ matrix.arch }}.${{ matrix.drv }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: cachix/install-nix-action@v20
      - uses: cachix/cachix-action@v12
        with:
          name: pyperscan
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN }}"
      - name: setup emulation
        if: ${{ matrix.arch == 'aarch64-linux' }}
        run: |
          sudo apt update
          sudo apt install -q -y qemu-system-aarch64 qemu-efi binfmt-support qemu-user-static
          mkdir -p ~/.config/nix
          echo "system-features = aarch64-linux arm-linux" | sudo tee -a /etc/nix/nix.conf
      - name: Build nix shell
        run: |
          nix build -L .#devShells.${{ matrix.arch }}.default --option system ${{ matrix.arch }} --extra-platforms ${{ matrix.arch }}
      - name: Build nix package
        run: nix build -L .?submodules=1#packages.${{ matrix.arch }}.default.${{ matrix.drv }} --option system ${{ matrix.arch }} --extra-platforms ${{ matrix.arch }}

  sdist:
    name: Build - sdist
    needs:
      - checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: PyO3/maturin-action@v1
        with:
          container: off
          command: sdist
          args: -o dist
      - name: Upload sdist
        uses: actions/upload-artifact@v3
        with:
          name: sdist
          path: dist

  linux-wheels:
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            arch: amd64
          - target: aarch64-unknown-linux-gnu
            arch: arm64
    name: Build wheel - ${{ matrix.target }}
    needs:
      - checks
    runs-on: ubuntu-latest
    env:
      image: ghcr.io/vlaci/pyperscan-builder-${{ matrix.target }}
    permissions:
      packages: write
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Set up cargo cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: linux-cargo-
      - name: Install dependencies
        uses: extractions/setup-crate@v1
        with:
          owner: casey
          name: just
          version: 1.9.0
      - name: Log in to the GitHub Container registry
        uses: redhat-actions/podman-login@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Check cached build image
        run: |
          TAG=${{hashFiles(format('Containerfile.{0}', matrix.target)) }}
          echo tag=$TAG >> $GITHUB_ENV
      - run: just wheel ${{ matrix.target }}
      - run: podman push $image:$tag
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels-${{ matrix.target }}
          path: dist

  macos-wheel:
    needs:
      - checks
    name: Build wheel - universal2-apple-darwin
    runs-on: macos-11
    env:
      MACOSX_DEPLOYMENT_TARGET: "10.9"
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Set up cargo cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: macos-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: macos-cargo-
      - name: Install dependencies
        run: |
          brew install boost ragel
          echo container= > $GITHUB_ENV
      - name: Disable tools
        run: |
          rm hyperscan-sys/*/tools/CMakeLists.txt
      - uses: PyO3/maturin-action@v1
        with:
          command: build
          args: --release --strip -o dist -F vectorscan --universal2
      - uses: actions/setup-python@v4
        with:
          python-version: "3.8"
      - name: Installing built wheel
        run: |
          whl=(dist/pyperscan-*.whl)
          pip install "$whl[test]"
      - uses: dariocurr/pytest-summary@main
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels-universal2-apple-darwin
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs:
      - sdist
      - linux-wheels
      - macos-wheel
    steps:
      - uses: actions/download-artifact@v3
        with:
          path: dist
      - name: Publish to PyPI
        uses: messense/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --skip-existing dist/*/*
